<?xml version="1.0" encoding="UTF-8"?><testsuites failures="0" name="dependency-check" tests="28"><testsuite failures="0" id="0" name="C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot-starter-data-rest\2.2.4.RELEASE\spring-boot-starter-data-rest-2.2.4.RELEASE.jar" package="spring-boot-starter-data-rest-2.2.4.RELEASE.jar" skipped="3" tests="3" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-20873" name="pkg:maven/org.springframework.boot/spring-boot-starter-data-rest@2.2.4.RELEASE"><skipped message="file name: spring-boot-autoconfigure-2.2.4.RELEASE.jar" /><system-out>In Spring Boot versions 3.0.0 - 3.0.5, 2.7.0 - 2.7.10, and older unsupported versions, an application that is deployed to Cloud Foundry could be susceptible to a security bypass. Users of affected versions should apply the following mitigation: 3.0.x users should upgrade to 3.0.6+. 2.7.x users should upgrade to 2.7.11+. Users of older, unsupported versions should upgrade to 3.0.6+ or 2.7.11+.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot-starter-data-rest\2.2.4.RELEASE\spring-boot-starter-data-rest-2.2.4.RELEASE.jar</system-err></testcase><testcase classname="CVE-2023-20883" name="pkg:maven/org.springframework.boot/spring-boot-starter-data-rest@2.2.4.RELEASE"><skipped message="file name: spring-boot-autoconfigure-2.2.4.RELEASE.jar" /><system-out>In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot-starter-data-rest\2.2.4.RELEASE\spring-boot-starter-data-rest-2.2.4.RELEASE.jar</system-err></testcase><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot-starter-data-rest@2.2.4.RELEASE"><skipped message="file name: spring-boot-autoconfigure-2.2.4.RELEASE.jar" /><system-out>spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot-starter-data-rest\2.2.4.RELEASE\spring-boot-starter-data-rest-2.2.4.RELEASE.jar</system-err></testcase></testsuite><testsuite failures="0" id="1" name="C:\Users\codel\.m2\repository\org\springframework\data\spring-data-rest-core\3.2.4.RELEASE\spring-data-rest-core-3.2.4.RELEASE.jar" package="spring-data-rest-core-3.2.4.RELEASE.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="spring-data-rest-core-3.2.4.RELEASE.jar"/></testsuite><testsuite failures="0" id="2" name="C:\Users\codel\.m2\repository\org\springframework\hateoas\spring-hateoas\1.0.3.RELEASE\spring-hateoas-1.0.3.RELEASE.jar" package="spring-hateoas-1.0.3.RELEASE.jar" skipped="1" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-34036" name="pkg:maven/org.springframework.hateoas/spring-hateoas@1.0.3.RELEASE"><skipped message="file name: spring-hateoas-1.0.3.RELEASE.jar" /><system-out>
Reactive web applications that use Spring HATEOAS to produce hypermedia-based responses might be exposed to malicious forwarded headers if they are not behind a trusted proxy that ensures correctness of such headers, or if they don&apos;t have anything else in place to handle (and possibly discard) forwarded headers either in WebFlux or at the level of the underlying HTTP server.

For the application to be affected, it needs to satisfy the following requirements:

  *  It needs to use the reactive web stack (Spring WebFlux) and Spring HATEOAS to create links in hypermedia-based responses.
  *  The application infrastructure does not guard against clients submitting (X-)Forwarded… headers.





</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\hateoas\spring-hateoas\1.0.3.RELEASE\spring-hateoas-1.0.3.RELEASE.jar</system-err></testcase></testsuite><testsuite failures="0" id="3" name="C:\Users\codel\.m2\repository\org\springframework\data\spring-data-commons\2.2.4.RELEASE\spring-data-commons-2.2.4.RELEASE.jar" package="spring-data-commons-2.2.4.RELEASE.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="spring-data-commons-2.2.4.RELEASE.jar"/></testsuite><testsuite failures="0" id="4" name="C:\Users\codel\.m2\repository\org\springframework\plugin\spring-plugin-core\2.0.0.RELEASE\spring-plugin-core-2.0.0.RELEASE.jar" package="spring-plugin-core-2.0.0.RELEASE.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="spring-plugin-core-2.0.0.RELEASE.jar"/></testsuite><testsuite failures="0" id="5" name="C:\Users\codel\.m2\repository\org\atteo\evo-inflector\1.2.2\evo-inflector-1.2.2.jar" package="evo-inflector-1.2.2.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="evo-inflector-1.2.2.jar"/></testsuite><testsuite failures="0" id="6" name="C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar" package="jackson-databind-2.10.2.jar" skipped="6" tests="6" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-35116" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><skipped message="file name: jackson-databind-2.10.2.jar" /><system-out>jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor&apos;s perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar</system-err></testcase><testcase classname="CVE-2021-46877" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><skipped message="file name: jackson-databind-2.10.2.jar" /><system-out>jackson-databind 2.10.x through 2.12.x before 2.12.6 and 2.13.x before 2.13.1 allows attackers to cause a denial of service (2 GB transient heap usage per read) in uncommon situations involving JsonNode JDK serialization.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar</system-err></testcase><testcase classname="CVE-2020-25649" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><skipped message="file name: jackson-databind-2.10.2.jar" /><system-out>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar</system-err></testcase><testcase classname="CVE-2020-36518" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><skipped message="file name: jackson-databind-2.10.2.jar" /><system-out>jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar</system-err></testcase><testcase classname="CVE-2022-42003" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><skipped message="file name: jackson-databind-2.10.2.jar" /><system-out>In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar</system-err></testcase><testcase classname="CVE-2022-42004" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><skipped message="file name: jackson-databind-2.10.2.jar" /><system-out>In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar</system-err></testcase></testsuite><testsuite failures="0" id="7" name="C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.10.2\jackson-core-2.10.2.jar" package="jackson-core-2.10.2.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jackson-core-2.10.2.jar"/></testsuite><testsuite failures="0" id="8" name="C:\Users\codel\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.10.2\jackson-annotations-2.10.2.jar" package="jackson-annotations-2.10.2.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jackson-annotations-2.10.2.jar"/></testsuite><testsuite failures="0" id="9" name="C:\Users\codel\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar" package="slf4j-api-1.7.30.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="slf4j-api-1.7.30.jar"/></testsuite><testsuite failures="0" id="10" name="C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar" package="spring-boot-2.2.4.RELEASE.jar" skipped="3" tests="3" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-20873" name="pkg:maven/org.springframework.boot/spring-boot@2.2.4.RELEASE"><skipped message="file name: spring-boot-autoconfigure-2.2.4.RELEASE.jar" /><system-out>In Spring Boot versions 3.0.0 - 3.0.5, 2.7.0 - 2.7.10, and older unsupported versions, an application that is deployed to Cloud Foundry could be susceptible to a security bypass. Users of affected versions should apply the following mitigation: 3.0.x users should upgrade to 3.0.6+. 2.7.x users should upgrade to 2.7.11+. Users of older, unsupported versions should upgrade to 3.0.6+ or 2.7.11+.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar</system-err></testcase><testcase classname="CVE-2023-20883" name="pkg:maven/org.springframework.boot/spring-boot@2.2.4.RELEASE"><skipped message="file name: spring-boot-autoconfigure-2.2.4.RELEASE.jar" /><system-out>In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar</system-err></testcase><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot@2.2.4.RELEASE"><skipped message="file name: spring-boot-autoconfigure-2.2.4.RELEASE.jar" /><system-out>spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer</system-out><system-err>location: C:\Users\codel\.m2\repository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar</system-err></testcase></testsuite><testsuite failures="0" id="11" name="C:\Users\codel\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar" package="logback-core-1.2.3.jar" skipped="4" tests="4" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-6378" name="pkg:maven/ch.qos.logback/logback-core@1.2.3"><skipped message="file name: logback-classic-1.2.3.jar" /><system-out>A serialization vulnerability in logback receiver component part of 
logback version 1.4.11 allows an attacker to mount a Denial-Of-Service 
attack by sending poisoned data.

</system-out><system-err>location: C:\Users\codel\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar</system-err></testcase><testcase classname="CVE-2021-42550" name="pkg:maven/ch.qos.logback/logback-core@1.2.3"><skipped message="file name: logback-classic-1.2.3.jar" /><system-out>In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.</system-out><system-err>location: C:\Users\codel\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar</system-err></testcase><testcase classname="CVE-2024-12801" name="pkg:maven/ch.qos.logback/logback-core@1.2.3"><skipped message="file name: logback-core-1.2.3.jar" /><system-out>Server-Side Request Forgery (SSRF) in SaxEventRecorder by QOS.CH logback version 0.1 to 1.3.14 and 1.4.0 to 1.5.12  on the Java platform, allows an attacker to 
forge requests by compromising logback configuration files in XML.



The attacks involves the modification of DOCTYPE declaration in  XML configuration files.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-12801 for details</system-out><system-err>location: C:\Users\codel\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar</system-err></testcase><testcase classname="CVE-2024-12798" name="pkg:maven/ch.qos.logback/logback-core@1.2.3"><skipped message="file name: logback-core-1.2.3.jar" /><system-out>ACE vulnerability in JaninoEventEvaluator  by QOS.CH logback-core
      upto including version 0.1 to 1.3.14 and 1.4.0 to 1.5.12 in Java applications allows
      attacker to execute arbitrary code by compromising an existing
      logback configuration file or by injecting an environment variable
      before program execution.





Malicious logback configuration files can allow the attacker to execute 
arbitrary code using the JaninoEventEvaluator extension.



A successful attack requires the user to have write access to a 
configuration file. Alternatively, the attacker could inject a malicious 
environment variable pointing to a malicious configuration file. In both 
cases, the attack requires existing privilege.</system-out><system-err>location: C:\Users\codel\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar</system-err></testcase></testsuite><testsuite failures="0" id="12" name="C:\Users\codel\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar" package="log4j-api-2.12.1.jar" skipped="5" tests="5" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2021-44832" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2021-44228" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2021-45105" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2021-45046" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2020-9488" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase></testsuite><testsuite failures="0" id="13" name="C:\Users\codel\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar" package="jul-to-slf4j-1.7.30.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jul-to-slf4j-1.7.30.jar"/></testsuite><testsuite failures="0" id="14" name="C:\Users\codel\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar" package="jakarta.annotation-api-1.3.5.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jakarta.annotation-api-1.3.5.jar"/></testsuite><testsuite failures="0" id="15" name="C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar" package="snakeyaml-1.25.jar" skipped="10" tests="10" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2017-18640" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-38752" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2021-4235" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Due to unbounded alias chasing, a maliciously crafted YAML file can cause the system to consume significant system resources. If parsing user input, this may be used as a denial of service vector.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-38751" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-38750" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-41854" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-25857" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-38749" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-1471" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>SnakeYaml&apos;s Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml&apos;s SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase><testcase classname="CVE-2022-3064" name="pkg:maven/org.yaml/snakeyaml@1.25"><skipped message="file name: snakeyaml-1.25.jar" /><system-out>Parsing malicious or large YAML documents can consume excessive amounts of CPU or memory.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar</system-err></testcase></testsuite><testsuite failures="0" id="16" name="C:\Users\codel\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.10.2\jackson-datatype-jdk8-2.10.2.jar" package="jackson-datatype-jdk8-2.10.2.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jackson-datatype-jdk8-2.10.2.jar"/></testsuite><testsuite failures="0" id="17" name="C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar" package="tomcat-embed-core-9.0.30.jar" skipped="29" tests="29" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2019-17569" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>The refactoring present in Apache Tomcat 9.0.28 to 9.0.30, 8.5.48 to 8.5.50 and 7.0.98 to 7.0.99 introduced a regression. The result of the regression was that invalid Transfer-Encoding headers were incorrectly processed leading to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-43980" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2022-34305" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>In Apache Tomcat 10.1.0-M1 to 10.1.0-M16, 10.0.0-M1 to 10.0.22, 9.0.30 to 9.0.64 and 8.5.50 to 8.5.81 the Form authentication example in the examples web application displayed user provided data without filtering, exposing a XSS vulnerability.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2023-45648" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Improper Input Validation vulnerability in Apache Tomcat.Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially 
crafted, invalid trailer header could cause Tomcat to treat a single 
request as multiple requests leading to the possibility of request 
smuggling when behind a reverse proxy.

Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2023-28708" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>
When using the RemoteIpFilter with requests received from a    reverse proxy via HTTP that include the X-Forwarded-Proto    header set to https, session cookies created by Apache Tomcat 11.0.0-M1 to 11.0.0.-M2, 10.1.0-M1 to 10.1.5, 9.0.0-M1 to 9.0.71 and 8.5.0 to 8.5.85 did not include the secure attribute. This could result in the user agent transmitting the session cookie over an insecure channel.







</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2023-44487" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-25122" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>When responding to new h2c connection requests, Apache Tomcat versions 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41 and 8.5.0 to 8.5.61 could duplicate request headers and a limited amount of request body from one request to another meaning user A and user B could both see the results of user A&apos;s request.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2023-46589" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Improper Input Validation vulnerability in Apache Tomcat.Tomcat from 11.0.0-M1 through 11.0.0-M10, from 10.1.0-M1 through 10.1.15, from 9.0.0-M1 through 9.0.82 and from 8.5.0 through 8.5.95 did not correctly parse HTTP trailer headers. A trailer header that exceeded the header size limit could cause Tomcat to treat a single 
request as multiple requests leading to the possibility of request 
smuggling when behind a reverse proxy.

Users are recommended to upgrade to version 11.0.0-M11 onwards, 10.1.16 onwards, 9.0.83 onwards or 8.5.96 onwards, which fix the issue.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-13943" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>If an HTTP/2 client connecting to Apache Tomcat 10.0.0-M1 to 10.0.0-M7, 9.0.0.M1 to 9.0.37 or 8.5.0 to 8.5.57 exceeded the agreed maximum number of concurrent streams for a connection (in violation of the HTTP/2 protocol), it was possible that a subsequent request made on that connection could contain HTTP headers - including HTTP/2 pseudo headers - from a previous request rather than the intended headers. This could lead to users seeing responses for unexpected resources.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-17527" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>While investigating bug 64830 it was discovered that Apache Tomcat 10.0.0-M1 to 10.0.0-M9, 9.0.0-M1 to 9.0.39 and 8.5.0 to 8.5.59 could re-use an HTTP request header value from the previous stream received on an HTTP/2 connection for the request associated with the subsequent stream. While this would most likely lead to an error and the closure of the HTTP/2 connection, it is possible that information could leak between requests.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-9484" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>When using Apache Tomcat versions 10.0.0-M1 to 10.0.0-M4, 9.0.0.M1 to 9.0.34, 8.5.0 to 8.5.54 and 7.0.0 to 7.0.103 if a) an attacker is able to control the contents and name of a file on the server; and b) the server is configured to use the PersistenceManager with a FileStore; and c) the PersistenceManager is configured with sessionAttributeValueClassNameFilter=&quot;null&quot; (the default unless a SecurityManager is used) or a sufficiently lax filter to allow the attacker provided object to be deserialized; and d) the attacker knows the relative file path from the storage location used by FileStore to the file the attacker has control over; then, using a specifically crafted request, the attacker will be able to trigger remote code execution via deserialization of the file under their control. Note that all of conditions a) to d) must be true for the attack to succeed.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2022-42252" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>If Apache Tomcat 8.5.0 to 8.5.82, 9.0.0-M1 to 9.0.67, 10.0.0-M1 to 10.0.26 or 10.1.0-M1 to 10.1.0 was configured to ignore invalid HTTP headers via setting rejectIllegalHeader to false (the default for 8.5.x only), Tomcat did not reject a request containing an invalid Content-Length header making a request smuggling attack possible if Tomcat was located behind a reverse proxy that also failed to reject the request with the invalid header.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-25329" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>The fix for CVE-2020-9484 was incomplete. When using Apache Tomcat 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41, 8.5.0 to 8.5.61 or 7.0.0. to 7.0.107 with a configuration edge case that was highly unlikely to be used, the Tomcat instance was still vulnerable to CVE-2020-9494. Note that both the previously published prerequisites for CVE-2020-9484 and the previously published mitigations for CVE-2020-9484 also apply to this issue.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-41079" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Apache Tomcat 8.5.0 to 8.5.63, 9.0.0-M1 to 9.0.43 and 10.0.0-M1 to 10.0.2 did not properly validate incoming TLS packets. When Tomcat was configured to use NIO+OpenSSL or NIO2+OpenSSL for TLS, a specially crafted packet could be used to trigger an infinite loop resulting in a denial of service.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-8022" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>A Incorrect Default Permissions vulnerability in the packaging of tomcat on SUSE Enterprise Storage 5, SUSE Linux Enterprise Server 12-SP2-BCL, SUSE Linux Enterprise Server 12-SP2-LTSS, SUSE Linux Enterprise Server 12-SP3-BCL, SUSE Linux Enterprise Server 12-SP3-LTSS, SUSE Linux Enterprise Server 12-SP4, SUSE Linux Enterprise Server 12-SP5, SUSE Linux Enterprise Server 15-LTSS, SUSE Linux Enterprise Server for SAP 12-SP2, SUSE Linux Enterprise Server for SAP 12-SP3, SUSE Linux Enterprise Server for SAP 15, SUSE OpenStack Cloud 7, SUSE OpenStack Cloud 8, SUSE OpenStack Cloud Crowbar 8 allows local attackers to escalate from group tomcat to root. This issue affects: SUSE Enterprise Storage 5 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP2-BCL tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP2-LTSS tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP3-BCL tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP3-LTSS tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP4 tomcat versions prior to 9.0.35-3.39.1. SUSE Linux Enterprise Server 12-SP5 tomcat versions prior to 9.0.35-3.39.1. SUSE Linux Enterprise Server 15-LTSS tomcat versions prior to 9.0.35-3.57.3. SUSE Linux Enterprise Server for SAP 12-SP2 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server for SAP 12-SP3 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server for SAP 15 tomcat versions prior to 9.0.35-3.57.3. SUSE OpenStack Cloud 7 tomcat versions prior to 8.0.53-29.32.1. SUSE OpenStack Cloud 8 tomcat versions prior to 8.0.53-29.32.1. SUSE OpenStack Cloud Crowbar 8 tomcat versions prior to 8.0.53-29.32.1.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-11996" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>A specially crafted sequence of HTTP/2 requests sent to Apache Tomcat 10.0.0-M1 to 10.0.0-M5, 9.0.0.M1 to 9.0.35 and 8.5.0 to 8.5.55 could trigger high CPU usage for several seconds. If a sufficient number of such requests were made on concurrent HTTP/2 connections, the server could become unresponsive.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-13934" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>An h2c direct connection to Apache Tomcat 10.0.0-M1 to 10.0.0-M6, 9.0.0.M5 to 9.0.36 and 8.5.1 to 8.5.56 did not release the HTTP/1.1 processor after the upgrade to HTTP/2. If a sufficient number of such requests were made, an OutOfMemoryException could occur leading to a denial of service.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-1938" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>When using the Apache JServ Protocol (AJP), care must be taken when trusting incoming connections to Apache Tomcat. Tomcat treats AJP connections as having higher trust than, for example, a similar HTTP connection. If such connections are available to an attacker, they can be exploited in ways that may be surprising. In Apache Tomcat 9.0.0.M1 to 9.0.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99, Tomcat shipped with an AJP Connector enabled by default that listened on all configured IP addresses. It was expected (and recommended in the security guide) that this Connector would be disabled if not required. This vulnerability report identified a mechanism that allowed: - returning arbitrary files from anywhere in the web application - processing any file in the web application as a JSP Further, if the web application allowed file upload and stored those files within the web application (or the attacker was able to control the content of the web application by some other means) then this, along with the ability to process a file as a JSP, made remote code execution possible. It is important to note that mitigation is only required if an AJP port is accessible to untrusted users. Users wishing to take a defence-in-depth approach and block the vector that permits returning arbitrary files and execution as JSP may upgrade to Apache Tomcat 9.0.31, 8.5.51 or 7.0.100 or later. A number of changes were made to the default AJP Connector configuration in 9.0.31 to harden the default configuration. It is likely that users upgrading to 9.0.31, 8.5.51 or 7.0.100 or later will need to make small changes to their configurations.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-13935" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>The payload length in a WebSocket frame was not correctly validated in Apache Tomcat 10.0.0-M1 to 10.0.0-M6, 9.0.0.M1 to 9.0.36, 8.5.0 to 8.5.56 and 7.0.27 to 7.0.104. Invalid payload lengths could trigger an infinite loop. Multiple requests with invalid payload lengths could lead to a denial of service.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2024-21733" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Generation of Error Message Containing Sensitive Information vulnerability in Apache Tomcat.This issue affects Apache Tomcat: from 8.5.7 through 8.5.63, from 9.0.0-M11 through 9.0.43.

Users are recommended to upgrade to version 8.5.64 onwards or 9.0.44 onwards, which contain a fix for the issue.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-24122" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>When serving resources from a network location using the NTFS file system, Apache Tomcat versions 10.0.0-M1 to 10.0.0-M9, 9.0.0.M1 to 9.0.39, 8.5.0 to 8.5.59 and 7.0.0 to 7.0.106 were susceptible to JSP source code disclosure in some configurations. The root cause was the unexpected behaviour of the JRE API File.getCanonicalPath() which in turn was caused by the inconsistent behaviour of the Windows API (FindFirstFileW) in some circumstances.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-33037" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Apache Tomcat 10.0.0-M1 to 10.0.6, 9.0.0.M1 to 9.0.46 and 8.5.0 to 8.5.66 did not correctly parse the HTTP transfer-encoding request header in some circumstances leading to the possibility to request smuggling when used with a reverse proxy. Specifically: - Tomcat incorrectly ignored the transfer encoding header if the client declared it would only accept an HTTP/1.0 response; - Tomcat honoured the identify encoding; and - Tomcat did not ensure that, if present, the chunked encoding was the final encoding.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2023-42795" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Incomplete Cleanup vulnerability in Apache Tomcat.When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could 
cause Tomcat to skip some parts of the recycling process leading to 
information leaking from the current request/response to the next.

Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2021-30640" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>A vulnerability in the JNDI Realm of Apache Tomcat allows an attacker to authenticate using variations of a valid user name and/or to bypass some of the protection provided by the LockOut Realm. This issue affects Apache Tomcat 10.0.0-M1 to 10.0.5; 9.0.0.M1 to 9.0.45; 8.5.0 to 8.5.65.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2020-1935" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>In Apache Tomcat 9.0.0.M1 to 9.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99 the HTTP header parsing code used an approach to end-of-line parsing that allowed some invalid HTTP headers to be parsed as valid. This led to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2024-38286" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Allocation of Resources Without Limits or Throttling vulnerability in Apache Tomcat.

This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M20, from 10.1.0-M1 through 10.1.24, from 9.0.13 through 9.0.89. Older, unsupported versions may also be affected.


Users are recommended to upgrade to version 11.0.0-M21, 10.1.25, or 9.0.90, which fixes the issue.



Apache Tomcat, under certain configurations on any platform, allows an attacker to cause an OutOfMemoryError by abusing the TLS handshake process.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2025-24813" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>Path Equivalence: &apos;file.Name&apos; (Internal Dot) leading to Remote Code Execution and/or Information disclosure and/or malicious content added to uploaded files via write enabled Default Servlet in Apache Tomcat.

This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98.

If all of the following were true, a malicious user was able to view       security sensitive files and/or inject content into those files:
- writes enabled for the default servlet (disabled by default)
- support for partial PUT (enabled by default)
- a target URL for security sensitive uploads that was a sub-directory of a target URL for public uploads
- attacker knowledge of the names of security sensitive files being uploaded
- the security sensitive files also being uploaded via partial PUT

If all of the following were true, a malicious user was able to       perform remote code execution:
- writes enabled for the default servlet (disabled by default)
- support for partial PUT (enabled by default)
- application was using Tomcat&apos;s file based session persistence with the default storage location
- application included a library that may be leveraged in a deserialization attack

Users are recommended to upgrade to version 11.0.3, 10.1.35 or 9.0.99, which fixes the issue.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2023-41080" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>URL Redirection to Untrusted Site (&apos;Open Redirect&apos;) vulnerability in FORM authentication feature Apache Tomcat.This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M10, from 10.1.0-M1 through 10.0.12, from 9.0.0-M1 through 9.0.79 and from 8.5.0 through 8.5.92.

The vulnerability is limited to the ROOT (default) web application.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase><testcase classname="CVE-2022-29885" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><skipped message="file name: tomcat-embed-core-9.0.30.jar" /><system-out>The documentation of Apache Tomcat 10.1.0-M1 to 10.1.0-M14, 10.0.0-M1 to 10.0.20, 9.0.13 to 9.0.62 and 8.5.38 to 8.5.78 for the EncryptInterceptor incorrectly stated it enabled Tomcat clustering to run over an untrusted network. This was not correct. While the EncryptInterceptor does provide confidentiality and integrity protection, it does not protect against all risks associated with running over any untrusted network, particularly DoS risks.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar</system-err></testcase></testsuite><testsuite failures="0" id="18" name="C:\Users\codel\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\9.0.30\tomcat-embed-el-9.0.30.jar" package="tomcat-embed-el-9.0.30.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="tomcat-embed-el-9.0.30.jar"/></testsuite><testsuite failures="0" id="19" name="C:\Users\codel\.m2\repository\jakarta\validation\jakarta.validation-api\2.0.2\jakarta.validation-api-2.0.2.jar" package="jakarta.validation-api-2.0.2.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jakarta.validation-api-2.0.2.jar"/></testsuite><testsuite failures="0" id="20" name="C:\Users\codel\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.18.Final\hibernate-validator-6.0.18.Final.jar" package="hibernate-validator-6.0.18.Final.jar" skipped="2" tests="2" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2020-10693" name="pkg:maven/org.hibernate.validator/hibernate-validator@6.0.18.Final"><skipped message="file name: hibernate-validator-6.0.18.Final.jar" /><system-out>A flaw was found in Hibernate Validator version 6.1.2.Final. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.</system-out><system-err>location: C:\Users\codel\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.18.Final\hibernate-validator-6.0.18.Final.jar</system-err></testcase><testcase classname="CVE-2023-1932" name="pkg:maven/org.hibernate.validator/hibernate-validator@6.0.18.Final"><skipped message="file name: hibernate-validator-6.0.18.Final.jar" /><system-out>A flaw was found in hibernate-validator&apos;s &apos;isValid&apos; method in the org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator class, which can be bypassed by omitting the tag ending in a less-than character. Browsers may render an invalid html, allowing HTML injection or Cross-Site-Scripting (XSS) attacks.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2023-1932 for details</system-out><system-err>location: C:\Users\codel\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.18.Final\hibernate-validator-6.0.18.Final.jar</system-err></testcase></testsuite><testsuite failures="0" id="21" name="C:\Users\codel\.m2\repository\org\jboss\logging\jboss-logging\3.4.1.Final\jboss-logging-3.4.1.Final.jar" package="jboss-logging-3.4.1.Final.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="jboss-logging-3.4.1.Final.jar"/></testsuite><testsuite failures="0" id="22" name="C:\Users\codel\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar" package="classmate-1.5.1.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="classmate-1.5.1.jar"/></testsuite><testsuite failures="0" id="23" name="C:\Users\codel\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar" package="json-path-2.4.0.jar" skipped="1" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-51074" name="pkg:maven/com.jayway.jsonpath/json-path@2.4.0"><skipped message="file name: json-path-2.4.0.jar" /><system-out>json-path v2.8.0 was discovered to contain a stack overflow via the Criteria.parse() method.</system-out><system-err>location: C:\Users\codel\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar</system-err></testcase></testsuite><testsuite failures="0" id="24" name="C:\Users\codel\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar" package="json-smart-2.3.jar" skipped="3" tests="3" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-1370" name="pkg:maven/net.minidev/json-smart@2.3"><skipped message="file name: json-smart-2.3.jar" /><system-out>[Json-smart](https://netplex.github.io/json-smart/) is a performance focused, JSON processor lib.

When reaching a ‘[‘ or ‘{‘ character in the JSON input, the code parses an array or an object respectively.

It was discovered that the code does not have any limit to the nesting of such arrays or objects. Since the parsing of nested arrays and objects is done recursively, nesting too many of them can cause a stack exhaustion (stack overflow) and crash the software.</system-out><system-err>location: C:\Users\codel\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar</system-err></testcase><testcase classname="CVE-2021-31684" name="pkg:maven/net.minidev/json-smart@2.3"><skipped message="file name: json-smart-2.3.jar" /><system-out>A vulnerability was discovered in the indexOf function of JSONParserByteArray in JSON Smart versions 1.3 and 2.4 which causes a denial of service (DOS) via a crafted web request.</system-out><system-err>location: C:\Users\codel\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar</system-err></testcase><testcase classname="CVE-2021-27568" name="pkg:maven/net.minidev/json-smart@2.3"><skipped message="file name: json-smart-2.3.jar" /><system-out>An issue was discovered in netplex json-smart-v1 through 2015-10-23 and json-smart-v2 through 2.4. An exception is thrown from a function, but it is not caught, as demonstrated by NumberFormatException. When it is not caught, it may cause programs using the library to crash or expose sensitive information.</system-out><system-err>location: C:\Users\codel\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar</system-err></testcase></testsuite><testsuite failures="0" id="25" name="C:\Users\codel\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar" package="accessors-smart-1.2.jar" skipped="1" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="CVE-2023-1370" name="pkg:maven/net.minidev/accessors-smart@1.2"><skipped message="file name: accessors-smart-1.2.jar" /><system-out>[Json-smart](https://netplex.github.io/json-smart/) is a performance focused, JSON processor lib.

When reaching a ‘[‘ or ‘{‘ character in the JSON input, the code parses an array or an object respectively.

It was discovered that the code does not have any limit to the nesting of such arrays or objects. Since the parsing of nested arrays and objects is done recursively, nesting too many of them can cause a stack exhaustion (stack overflow) and crash the software.</system-out><system-err>location: C:\Users\codel\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar</system-err></testcase></testsuite><testsuite failures="0" id="26" name="C:\Users\codel\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar" package="asm-5.0.4.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="asm-5.0.4.jar"/></testsuite><testsuite failures="0" id="27" name="C:\Users\codel\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar" package="spring-core-5.2.3.RELEASE.jar" skipped="0" tests="1" timestamp="2025-04-20T13:47:27.8894433"><testcase classname="dependency-check" name="spring-core-5.2.3.RELEASE.jar"/></testsuite></testsuites>